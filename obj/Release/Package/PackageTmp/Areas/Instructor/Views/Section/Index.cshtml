@model IEnumerable<CoursesManagementSystem.Models.Section>

@{
    ViewBag.Title = "Sections";
}


<p>
    @*@Html.ActionLink("Create New", "Create",new {Id = ViewBag.CourseId},new {@class = "btn btn-primary m-2"})*@
    <button class="btn btn-primary m-2 " onclick="sectionPromot()">Create New</button>
</p>
<table class="table">
    <tr>
        
        <th>
            @Html.DisplayNameFor(model => model.Id)
        </th>  
        
        <th>
            @Html.DisplayNameFor(model => model.Name)
        </th>
        <th>
            @Html.DisplayName("Lessons Count")
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr id="@item.Id">

        <td>
            @Html.DisplayFor(modelItem => item.Id)
        </td>
        
        <td>
            @Html.DisplayFor(modelItem => item.Name)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Lessons.Count)
        </td>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
            @Html.ActionLink("Details", "Details", new { id = item.Id }) |

            <a href="javascript:;" onclick="showDeleteConfirmation(@item.Id)" style="color: red; font-size: 1.5rem;" class="fa fa-trash"></a>
        </td>
    </tr>
}

</table>

@section Scripts {
    
    <script>


 function showDeleteConfirmation(secID) {
    bootbox.confirm({
        message: 'Are you sure you want to delete the section?',
        buttons: {
            confirm: {
                label: 'Yes',
                className: 'btn-success'
            },
            cancel: {
                label: 'No',
                className: 'btn-danger'
            }
        },
        callback: function (result) {
            if (result) {
                handleSectionDeletion(secID);
            }
        }
    });
}

     function handleSectionDeletion(secID) {
         fetch('@Url.Action("Remove", "Section")/' + secID, {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json; charset=utf-8'
        }
    })
    .then(response => response.json())
    .then(data => {

        if (data.success) {
            var row = document.getElementById(secID);
            row.parentNode.removeChild(row);
        } else {
            alert(data.message || 'An error occurred while deleting the course. Please try again.');
        }
    })
    .catch(error => {
        console.error('An error occurred while deleting the course:', error);
        alert('An error occurred while deleting the course. Please try again.');
    });
        }


        function sectionPromot() {
            bootbox.prompt('add a new section',
                function (result) {
                    const JsonData = JSON.stringify({
                        Id: @ViewBag.CourseId , sectionName: result
                    })
                    const xmhr = new XMLHttpRequest();
                    xmhr.open('POST', '@Url.Action("Create","section")');
                    xmhr.setRequestHeader('Content-Type', 'application/json');
                    xmhr.onreadystatechange = function () {
                        if (xmhr.readyState === 4) {
                            if (xmhr.status === 200) {
                                window.location.reload();
                            }
                            else {
                                console.error('Error:', xhr.status);
                            }
                        }
                    };
                    xmhr.send(JsonData);
                })
        }

    </script>

    } 