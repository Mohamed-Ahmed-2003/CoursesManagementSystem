@model CoursesManagementSystem.ViewModels.CourseCreateViewModel

@{
    ViewBag.Title = "Create";

}


@using (Html.BeginForm("Create", "course", FormMethod.Post, new { enctype = "multipart/form-data", id = "courseForm" }))
{
    @Html.AntiForgeryToken()
    <div class="form-group d-block">

        <div class="col-md-offset-2 col-md-12 ">
            <input type="submit" value="Create" class="btn btn-success" onclick="prepareInputs()" />
        </div>

        @if (@ViewBag.ErrorMessage != null)
        {
            <div class="alert alert-danger m-3">
                <h3>@ViewBag.ErrorMessage</h3>
            </div>
        }
    </div>

    <div class="d-flex flex-wrap">
        <div class="form-horizontal" style="width:70%">
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.course.Name, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.course.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.course.Name, "", new { @class = "text-danger" })
                </div>
            </div>





            <div class="form-group">
                @Html.LabelFor(model => model.course.CategoryId, "CategoryId", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.DropDownListFor(model => model.course.CategoryId, Model.Categories, new { @class = "form-control p-1" })

                    @Html.ValidationMessageFor(model => model.course.CategoryId, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.course.TrainerId, "Trainer", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.DropDownListFor(model => model.course.TrainerId, Model.Trainers, new { @class = "form-control p-1" })

                    @Html.ValidationMessageFor(model => model.course.TrainerId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.course.Description, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-12">
                    @Html.EditorFor(model => model.course.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.course.Description, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
        <div class="form-horizontal border-left align-self-center" style="width:30%">
            <div class="form-group">
                <div class="col-md-12">
                    <img id="previewImage" src="" />
                </div>

                <div class="col-md-12">
                    <div class="custom-file">
                        <input type="file" class="custom-file-input" style="cursor:pointer" id="ImageFile" name="ImageFile"
                               onchange="displayImage(this)">

                        <label class="custom-file-label" for="ImageFile">Upload an Image</label>
                    </div>
                    @Html.ValidationMessageFor(model => model.ImageFile, "", new { @class = "text-danger" })
                </div>

            </div>

        </div>

        <div class="d-flex flex-wrap mt-2 " style="width:70%">
            <div class="d-flex w-100 justify-content-between">

                <!-- Promises -->
                <div class="form-group ">
                    @Html.LabelFor(model => model.course.Promises, htmlAttributes: new { @class = "control-label col-md-2" })

                    <div id="promisesContainer" class="col-md-10 w-100">

                        <div class="input-group">
                            <input type="text" name="course.Promises"  class="form-control promises-input"  required />
                        </div>

                    </div>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-outline-secondary w-100" onclick="addInput('promisesContainer','course.Promises','promises-input')">Add More Promises</button>
                    </div>
                </div>

                <!-- Topics -->
                <div class="form-group">
                    @Html.LabelFor(model => model.course.Topics, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div id="topicsContainer" class="col-md-10 w-100">
                        <div class="input-group">
                            <input type="text" name="course.Topics" class="form-control topics-input" required />

                        </div>
                    </div>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-outline-secondary w-100" onclick="addInput('topicsContainer','course.Topics','topics-input')">Add More Topics</button>
                    </div>
                </div>

                <!-- Prerequests -->
                <div class="form-group">
                    @Html.LabelFor(model => model.course.Prerequests, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div id="prerequestsContainer" class="col-md-10 w-100">
                        <div class="input-group">
                            <input type="text" name="course.Prerequests" class="form-control prerequests-input" required />
                        </div>
                    </div>
                    <div class="input-group-append">
                        <button type="button" class="btn btn-outline-secondary w-100" onclick="addInput('prerequestsContainer','course.Prerequests','prerequests-input')">Add More Prerequests</button>
                    </div>
                </div>


            </div>
        </div>

    </div>

}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>
    function addInput(containerId, propertyName, inputClass) {
        var container = document.getElementById(containerId);

        // Create input element
        var input = document.createElement("input");
        input.type = "text";
        input.name = propertyName;
        input.required = true;
        input.className = "form-control " + inputClass;
        container.appendChild(input);

        // Create container for input and icon
        var inputContainer = document.createElement("div");
        inputContainer.className = "input-group";

        // Append input to the container
        inputContainer.appendChild(input);

        // Create remove button (i icon)
        var removeButton = document.createElement("i");
        removeButton.className = "fa fa-times-circle text-danger ml-2";
        removeButton.style.cursor = "pointer";

        // Add click event to remove the input and the button
        removeButton.onclick = function () {
            container.removeChild(inputContainer);
        };

        // Append icon to the container
        inputContainer.appendChild(removeButton);

        // Append the container to the main container
        container.appendChild(inputContainer);
    }


    function prepareInputs() {
        var promisesInputs = document.querySelectorAll('.promises-input');
        var topicsInputs = document.querySelectorAll('.topics-input');
        var prerequestsInputs = document.querySelectorAll('.prerequests-input');

        var promisesValues = Array.from(promisesInputs).map(function (input) {
            return input.value;
        }).join(',');

        var topicsValues = Array.from(topicsInputs).map(function (input) {
            return input.value;
        }).join(',');

        var prerequestsValues = Array.from(prerequestsInputs).map(function (input) {
            return input.value;
        }).join(',');

        // Update values of existing properties
        document.querySelector('[name="course.Promises"]').value = promisesValues;
        document.querySelector('[name="course.Topics"]').value = topicsValues;
        document.querySelector('[name="course.Prerequests"]').value = prerequestsValues;

        // Submit the form
        document.getElementById('courseForm').submit();
    }
</script>
